{
    // general        
    "telemetry.telemetryLevel": "off",
    "diffEditor.renderSideBySide": true,
    "diffEditor.maxComputationTime": 0,
    "editor.rulers": [
        120
    ],
    "editor.formatOnSave": true,
    "editor.suggestSelection": "first",
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "[html]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "[ignore]": {
        "editor.defaultFormatter": "foxundermoon.shell-format"
    },
    "explorer.confirmDelete": false,
    "explorer.confirmPasteNative": false,
    "terminal.external.linuxExec": "/bin/bash",
    "workbench.iconTheme": "vscode-icons",
    "workbench.tree.indent": 10,
    "workbench.settings.applyToAllProfiles": [
        "editor.defaultFormatter"
    ],
    "window.openFoldersInNewWindow": "on",
    "window.menuBarVisibility": "visible",
    "window.title": "${dirty}${rootNameShort}${separator}${activeEditorShort}${separator}${profileName}${separator}${remoteName}${separator}${appName}",
    "files.exclude": {
        "**/__pycache__": true,
        "**/.classpath": true,
        "**/.coverage": true,
        "**/.factorypath": true,
        "**/.project": true,
        "**/.pytest_cache": true,
        "**/.settings": true,
        "**/venv": true,
    },
    "search.exclude": {
        "**/venv": true
    },
    "files.associations": {
        "*.json": "jsonc", // to be able to comment json files and not use "_comment":
    },
    "debug.onTaskErrors": "debugAnyway",
    "explorer.confirmDragAndDrop": false,
    // extensions
    "vsicons.dontShowNewVersionMessage": true,
    "cmake.configureOnOpen": false,
    // markdown
    "[markdown]": {
        "editor.defaultFormatter": "DavidAnson.vscode-markdownlint"
    },
    // C++
    "C_Cpp.clang_format_style": "Visual Studio",
    "[cpp]": {
        "editor.defaultFormatter": "ms-vscode.cpptools",
        "editor.wordWrapColumn": 120
    },
    // php
    "php.validate.executablePath": "/opt/lampp/bin/php",
    // python
    "python.terminal.executeInFileDir": true,
    "python.terminal.activateEnvInCurrentTerminal": true,
    "python.defaultInterpreterPath": "${workspaceFolder}/.venv/bin/python",
    "[python]": {
        "editor.formatOnSave": true,
        "editor.defaultFormatter": "charliermarsh.ruff",
        "editor.codeActionsOnSave": {
            "source.fixAll": "explicit",
            "source.organizeImports": "explicit"
        },
    },
    "terminal.integrated.env.linux": {
        "PYTHONPATH": "${env:PYTHONPATH}:${workspaceFolder}/src:${workspaceFolder}/tests"
    },
    "ruff.lineLength": 120,
    // code-runner
    "code-runner.runInTerminal": true,
    "code-runner.enableAppInsights": false,
    "code-runner.respectShebang": false,
    "code-runner.saveFileBeforeRun": true,
    "code-runner.executorMap": {
        "javascript": "node",
        "java": "cd $dir && javac $fileName && java $fileNameWithoutExt",
        "c": "cd $dir && gcc $fileName -o a.out && ./a.out",
        "cpp": "cd $dir && g++ $fileName -o a.out && ./a.out",
        "php": "/opt/lampp/bin/php",
        "python": "cd $dir && python3 -u $fileName",
        "go": "go run",
        "shellscript": "bash",
        "typescript": "ts-node",
        "rust": "cd $dir && rustc $fileName && $dir$fileNameWithoutExt",
    },
    // json
    "[jsonc]": {
        "editor.defaultFormatter": "vscode.json-language-features"
    },
    "[json]": {
        "editor.defaultFormatter": "vscode.json-language-features"
    },
    // rust
    "rust-analyzer.inlayHints.bindingModeHints.enable": true,
    "rust-analyzer.debug.engineSettings": {},
    "lldb.launch.env": {
        "RUST_BACKTRACE": "full"
    },
    "rust-analyzer.inlayHints.typeHints.enable": false,
    "git.enableSmartCommit": true,
    "git.ignoreLimitWarning": true,
}
// workspace settings
{
    "folders": [
        {
            "name": "01_my_project",
            "path": "."
        }
    ],
    "settings": {
            "python.terminal.activateEnvInCurrentTerminal": true,
	    "python.defaultInterpreterPath": "${workspaceFolder}/.venv/bin/python",
	    "[python]": {
	        "editor.formatOnSave": true,
	        "editor.defaultFormatter": "charliermarsh.ruff",
	        "editor.codeActionsOnSave": {
	            "source.fixAll": "explicit",
	            "source.organizeImports": "explicit"
	        },
	    },
	    "ruff.lineLength": 120,
	    "git.ignoreLimitWarning": true,
	    "files.exclude": {
	        "**/venv": true,
	        "**/.coverage": true,
	    },
	    "terminal.integrated.env.linux": {
	        "PYTHONPATH": "${env:PYTHONPATH}:${workspaceFolder}/src:${workspaceFolder}/tests"
	    },
    },
    //debugger example python
	"launch": {
		"version": "0.2.0",
		"configurations": [
			{
				"name": "Python: Current File",
				"type": "python",
				"request": "launch",
				"program": "${file}",
				"console": "integratedTerminal",
				"justMyCode": false,
				"args": [
					"xx1",
					"xx2"
				]
			},
			{
				"name": "streamlit",
				"type": "python",
				"request": "launch",
				"program": "./venv/bin/streamlit",
				"justMyCode": true,
				"env": {
					"PYTHONPATH": "${workspaceFolder}:${workspaceFolder}/demo:${workspaceFolder}/dev",
				},
				"args": [
					"run",
					"./toto2.py"
				]
			},
			// C++ current file
			{
				"name": "g++ build and debug active file",
				"type": "cppdbg",
				"request": "launch",
				"program": "${fileDirname}/${fileBasenameNoExtension}",
				"args": [
					// "<",
					// "${fileDirname}/input.txt"
				],
				"stopAtEntry": false,
				"cwd": "${fileDirname}", // "${workspaceFolder}",
				"environment": [],
				"externalConsole": false,
				"MIMode": "gdb",
				"setupCommands": [
					{
						"description": "Enable pretty-printing for gdb",
						"text": "-enable-pretty-printing",
						"ignoreFailures": true
					}
				],
				"preLaunchTask": "g++ build active file",
				"miDebuggerPath": "/usr/bin/gdb",
			},

			
		]
	},
	"tasks": {
		"version": "2.0.0",
		"tasks": [
			{
				"type": "cppbuild",
				"label": "g++ build active file",
				"command": "/usr/bin/g++",
				"args": [
					"-fdiagnostics-color=always",
					"-g",
					"${file}",
					"-o",
					"${fileDirname}/${fileBasenameNoExtension}"
				],
				"options": {
					"cwd": "${fileDirname}"
				},
				"problemMatcher": [
					"$gcc"
				],
				"group": "build",
				"detail": "compiler: /usr/bin/g++"
			}
		]
	}
}


